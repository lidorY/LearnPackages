name: run test

on:
  workflow_dispatch: {}
  pull_request:
    types: [ opened, reopened, synchronize ]

jobs:
  end2end_test:
    strategy:
      max-parallel: 1
    name: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2 # Required to mount the Github Workspace to a volume
    - name: Wait for build to succeed
      uses: fountainhead/action-wait-for-check@v1.1.0
      id: wait-for-build
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: 'Push Docker image to GitHub registry'
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        timeoutSeconds: 20
        intervalSeconds: 10
    - uses: addnab/docker-run-action@v3
          with:
                image: ghcr.io/lidory/learnpackages/img2:latest
                run:  echo hello ${{ env.LIDOR }}
    - uses: addnab/docker-run-action@v3
          with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: gcr.io
            image: lidory/learnpackages/img2:latest
            shell: bash
            run:  echo hello ${{ env.LIDOR }}


  # test_container_image:
  #   strategy:
  #     max-parallel: 1
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write
  #   name: test_container_image
  #   container:
  #     image: ghcr.io/lidory/learnpackages/img2:latest
  #     credentials:
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2 # Required to mount the Github Workspace to a volume

    # - uses: ./.github/actions/set_vars
    # - name: Analysing the code with mypy
    #   run: |
    #     mypy . --show-error-codes
    #     echo "${{ env.TEST }}"
    #     echo $HOME
        